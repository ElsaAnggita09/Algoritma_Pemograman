# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cexIpneHYqxu5UiwmTLdF0jVbbxYuV0u
"""

# Operasi Matematika Dasar
def tambah(a, b):
    return a + b

def kurang(a, b):
    return a - b

def kali(a, b):
    return a * b

def bagi(a, b):
    if b == 0:
        return "Tidak bisa dibagi dengan nol"
    return a / b

# Operasi Matematika Lanjutan
def pangkat(a, b):
    return a ** b

def faktorial(n):
    if n < 0:
        return "Tidak ada faktorial untuk bilangan negatif"
    if n == 0 or n == 1:
        return 1
    hasil = 1
    for i in range(2, n+1):
        hasil *= i
    return hasil

def rata_rata(data):
    if not data:
        return 0
    return sum(data) / len(data)

def median(data):
    data = sorted(data)
    n = len(data)
    if n == 0:
        return 0
    tengah = n // 2
    if n % 2 == 0:
        return (data[tengah - 1] + data[tengah]) / 2
    else:
        return data[tengah]

# Contoh Penggunaan
print("Tambah:", tambah(10, 5))
print("Kurang:", kurang(10, 5))
print("Kali:", kali(10, 5))
print("Bagi:", bagi(10, 5))
print("Pangkat:", pangkat(2, 3))
print("Faktorial:", faktorial(5))
print("Rata-rata:", rata_rata([70, 80, 90]))
print("Median:", median([90, 70, 80]))

# Data mahasiswa disimpan dalam list of dictionary
mahasiswa = []

# Menambah data mahasiswa
def tambah_mahasiswa(nim, nama, nilai):
    data = {
        "nim": nim,
        "nama": nama,
        "nilai": nilai
    }
    mahasiswa.append(data)

# Mencari data mahasiswa berdasarkan NIM atau Nama
def cari_mahasiswa(keyword):
    hasil = []
    for m in mahasiswa:
        if m["nim"] == keyword or m["nama"].lower() == keyword.lower():
            hasil.append(m)
    return hasil

# Menghitung rata-rata nilai semua mahasiswa
def hitung_rata_rata():
    if not mahasiswa:
        return 0
    total = sum(m["nilai"] for m in mahasiswa)
    return total / len(mahasiswa)

# Menampilkan data mahasiswa berdasarkan peringkat nilai
def tampilkan_peringkat():
    data_urut = sorted(mahasiswa, key=lambda x: x["nilai"], reverse=True)
    for i, m in enumerate(data_urut, start=1):
        print(f"{i}. {m['nama']} (NIM: {m['nim']}), Nilai: {m['nilai']}")

# Contoh Penggunaan
tambah_mahasiswa("23001", "Elsa", 88)
tambah_mahasiswa("23002", "Raka", 75)
tambah_mahasiswa("23003", "Nina", 92)

print("\n📌 Cari Mahasiswa (NIM/Nama = 'Elsa'):")
hasil = cari_mahasiswa("Elsa")
for m in hasil:
    print(m)

print("\n📊 Rata-rata Nilai Mahasiswa:", hitung_rata_rata())

print("\n🏆 Peringkat Mahasiswa:")
tampilkan_peringkat()

# ======================
# VALIDASI INPUT
# ======================

def validasi_email(email):
    return "@" in email and "." in email and len(email) >= 6

def validasi_nomor_telepon(nomor):
    return nomor.isdigit() and (10 <= len(nomor) <= 13)

def validasi_tanggal(tanggal):
    # Format: DD-MM-YYYY
    if len(tanggal) != 10:
        return False
    if tanggal[2] != '-' or tanggal[5] != '-':
        return False
    dd, mm, yyyy = tanggal[:2], tanggal[3:5], tanggal[6:]
    if not (dd.isdigit() and mm.isdigit() and yyyy.isdigit()):
        return False
    d, m, y = int(dd), int(mm), int(yyyy)
    return 1 <= d <= 31 and 1 <= m <= 12 and y >= 1900

# ======================
# MANIPULASI STRING
# ======================

def hitung_kata(teks):
    return len(teks.split())

def format_teks(teks):
    # Ubah ke format Title Case
    return teks.title()

# ======================
# OPERASI FILE
# ======================

def baca_file(nama_file):
    try:
        with open(nama_file, "r") as f:
            return f.read()
    except FileNotFoundError:
        return "File tidak ditemukan."

def tulis_file(nama_file, isi):
    with open(nama_file, "w") as f:
        f.write(isi)
        return "Berhasil menulis ke file."

def proses_data_file(nama_file):
    isi = baca_file(nama_file)
    return {
        "jumlah_karakter": len(isi),
        "jumlah_kata": hitung_kata(isi)
    }

# ======================
# CONTOH PENGGUNAAN
# ======================

print("📧 Validasi Email:", validasi_email("elsa@email.com"))
print("📱 Validasi Nomor HP:", validasi_nomor_telepon("081234567890"))
print("📅 Validasi Tanggal:", validasi_tanggal("04-05-2025"))

print("\n📝 Hitung Kata:", hitung_kata("Saya sedang belajar Python."))
print("🔤 Format Teks:", format_teks("belajar python itu menyenangkan"))

# Contoh menulis dan membaca file (pastikan kamu bisa akses file di lokasi yang sesuai)
tulis_file("contoh.txt", "Ini adalah baris contoh file.")
print("📂 Isi File:", baca_file("contoh.txt"))
print("📊 Proses Data File:", proses_data_file("contoh.txt"))

#pertemuan 7 rekursi
import time

# 1. Rekursi dasar
def factorial_recursive(n):
    if n == 0 or n == 1:
        return 1
    return n * factorial_recursive(n-1)

# 2. Rekursi dengan memoization
memo_fact = {0: 1, 1: 1}
def factorial_memo(n):
    if n not in memo_fact:
        memo_fact[n] = n * factorial_memo(n-1)
    return memo_fact[n]

# 3. Iterasi
def factorial_iterative(n):
    result = 1
    for i in range(1, n+1):
        result *= i
    return result

# Test faktorial
nilai_faktorial = [5, 10, 20]
print("=== HASIL FAKTORIAL ===")
for n in nilai_faktorial:
    print(f"\nN = {n}")

    start = time.time()
    hasil = factorial_recursive(n)
    waktu = time.time() - start
    print(f"Rekursi dasar: {hasil} (Waktu: {waktu:.6f} detik)")

    start = time.time()
    hasil = factorial_memo(n)
    waktu = time.time() - start
    print(f"Memoization:   {hasil} (Waktu: {waktu:.6f} detik)")

    start = time.time()
    hasil = factorial_iterative(n)
    waktu = time.time() - start
    print(f"Iterasi:       {hasil} (Waktu: {waktu:.6f} detik)")

# 1. Rekursi dasar
def fibonacci_recursive(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    return fibonacci_recursive(n-1) + fibonacci_recursive(n-2)

# 2. Rekursi dengan memoization
memo_fib = {0: 0, 1: 1}
def fibonacci_memo(n):
    if n not in memo_fib:
        memo_fib[n] = fibonacci_memo(n-1) + fibonacci_memo(n-2)
    return memo_fib[n]

# 3. Iterasi
def fibonacci_iterative(n):
    if n == 0:
        return 0
    a, b = 0, 1
    for _ in range(2, n+1):
        a, b = b, a + b
    return b

# Test Fibonacci
nilai_fibonacci = [5, 10, 20, 30]
print("\n=== HASIL FIBONACCI ===")
for n in nilai_fibonacci:
    print(f"\nN = {n}")

    start = time.time()
    hasil = fibonacci_recursive(n)
    waktu = time.time() - start
    print(f"Rekursi dasar: {hasil} (Waktu: {waktu:.6f} detik)")

    start = time.time()
    hasil = fibonacci_memo(n)
    waktu = time.time() - start
    print(f"Memoization:   {hasil} (Waktu: {waktu:.6f} detik)")

    start = time.time()
    hasil = fibonacci_iterative(n)
    waktu = time.time() - start
    print(f"Iterasi:       {hasil} (Waktu: {waktu:.6f} detik)")

def tower_of_hanoi(n, source, target, auxiliary, moves=None):
    if moves is None:
        moves = []

    if n == 1:
        moves.append((source, target))
        return moves

    tower_of_hanoi(n-1, source, auxiliary, target, moves)
    moves.append((source, target))
    tower_of_hanoi(n-1, auxiliary, target, source, moves)

    return moves

def visualize_moves(moves, n):
    print(f"\n=== Visualisasi Tower of Hanoi (n={n}) ===")
    towers = {
        'A': list(range(n, 0, -1)),
        'B': [],
        'C': []
    }

    print("Kondisi awal:")
    print(f"A: {towers['A']}, B: {towers['B']}, C: {towers['C']}")

    for step, move in enumerate(moves, 1):
        disk = towers[move[0]].pop()
        towers[move[1]].append(disk)
        print(f"\nLangkah {step}: Pindah disk {disk} dari {move[0]} ke {move[1]}")
        print(f"A: {towers['A']}, B: {towers['B']}, C: {towers['C']}")

def solve_hanoi():
    for n in [3, 4, 5]:
        print(f"\n{'='*40}")
        print(f"SOLUSI TOWER OF HANOI DENGAN {n} DISK")
        print(f"{'='*40}")

        moves = tower_of_hanoi(n, 'A', 'C', 'B')

        # Ringkasan solusi
        print(f"\nTotal langkah: {len(moves)} (2^{n}-1 = {2**n-1})")
        print("\n10 Langkah pertama:")
        for i, move in enumerate(moves[:10], 1):
            print(f"Langkah {i}: Pindah dari {move[0]} ke {move[1]}")

        if n > 4:
            print("... (tampilkan sebagian)")

        # Visualisasi untuk n=3
        if n == 3:
            visualize_moves(moves, n)

solve_hanoi()